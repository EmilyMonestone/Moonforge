import 'package:firestore_odm/firestore_odm.dart';
import 'package:flutter/material.dart';
import 'package:moonforge/data/firebase/odm.dart';
import 'package:moonforge/core/services/app_router.dart';
import 'package:moonforge/core/services/notification_service.dart';
import 'package:moonforge/core/utils/logger.dart';
import 'package:moonforge/data/firebase/models/adventure.dart';
import 'package:moonforge/data/firebase/models/campaign.dart';
import 'package:moonforge/data/firebase/models/schema.dart';
import 'package:moonforge/l10n/app_localizations.dart';

/// Create a new adventure in a specific chapter context
Future<void> createAdventureInChapter(
  BuildContext context,
  Campaign campaign,
  String chapterId,
) async {
  final l10n = AppLocalizations.of(context)!;
  final odm = Odm.instance;

  final nameController = TextEditingController();

  final last = await odm.campaigns
      .doc(campaign.id)
      .chapters
      .doc(chapterId)
      .adventures
      .orderBy((o) => (o.order(descending: true),))
      .limit(1)
      .get();
  final nextOrder = last.isNotEmpty ? (last.first.order + 1) : 1;

  final confirmed = await showDialog<bool>(
    context: context,
    builder: (ctx) {
      return AlertDialog(
        title: Text('${l10n.createAdventure}: Nr. $nextOrder'),
        content: TextField(
          controller: nameController,
          autofocus: true,
          decoration: InputDecoration(labelText: l10n.name),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(false),
            child: Text(l10n.cancel),
          ),
          FilledButton(
            onPressed: () => Navigator.of(ctx).pop(true),
            child: Text(l10n.create),
          ),
        ],
      );
    },
  );
  if (confirmed != true) return;
  final name = nameController.text.trim();
  if (name.isEmpty) return;

  try {
    final adv = Adventure(
      id: FirestoreODM.autoGeneratedId,
      name: name,
      order: nextOrder,
      summary: '',
      content: null,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      rev: 0,
    );
    await odm.campaigns
        .doc(campaign.id)
        .chapters
        .doc(chapterId)
        .adventures
        .insert(adv);

    final created = await odm.campaigns
        .doc(campaign.id)
        .chapters
        .doc(chapterId)
        .adventures
        .where((f) => f.name(isEqualTo: name))
        .orderBy((o) => (o.createdAt(descending: true),))
        .limit(1)
        .get()
        .then((v) => v.isNotEmpty ? v.first : null);

    if (!context.mounted) return;
    notification.success(context, title: Text(l10n.createAdventure));
    if (created != null) {
      AdventureRoute(chapterId: chapterId, adventureId: created.id).go(context);
    }
  } catch (e, st) {
    logger.e('Create adventure failed', error: e, stackTrace: st);
    if (!context.mounted) return;
    notification.error(context, title: Text('Failed: $e'));
  }
}

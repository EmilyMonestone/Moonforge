import 'package:firestore_odm/firestore_odm.dart';
import 'package:flutter/material.dart';
import 'package:moonforge/core/database/odm.dart';
import 'package:moonforge/core/models/data/adventure.dart';
import 'package:moonforge/core/models/data/campaign.dart';
import 'package:moonforge/core/models/data/chapter.dart';
import 'package:moonforge/core/models/data/scene.dart';
import 'package:moonforge/core/models/data/schema.dart';
import 'package:moonforge/core/services/app_router.dart';
import 'package:moonforge/core/services/notification_service.dart';
import 'package:moonforge/core/utils/logger.dart';
import 'package:moonforge/l10n/app_localizations.dart';

Future<void> createScene(BuildContext context, Campaign campaign) async {
  final l10n = AppLocalizations.of(context)!;
  final odm = Odm.instance;

  final chapters = await odm.campaigns
      .doc(campaign.id)
      .chapters
      .orderBy((o) => (o.order(),))
      .get();
  if (chapters.isEmpty) {
    if (context.mounted) {
      notification.info(context, title: Text(l10n.noChaptersYet));
    }
    return;
  }
  Chapter selectedChapter = chapters.first;
  List<Adventure> adventures = await odm.campaigns
      .doc(campaign.id)
      .chapters
      .doc(selectedChapter.id)
      .adventures
      .orderBy((o) => (o.order(),))
      .get();
  if (adventures.isEmpty) {
    if (context.mounted) {
      notification.info(context, title: Text(l10n.noAdventuresYet));
    }
    return;
  }
  Adventure selectedAdventure = adventures.first;

  final last = await odm.campaigns
      .doc(campaign.id)
      .chapters
      .doc(selectedChapter.id)
      .adventures
      .doc(selectedAdventure.id)
      .scenes
      .orderBy((o) => (o.order(descending: true),))
      .limit(1)
      .get();
  final nextOrder = last.isNotEmpty ? (last.first.order + 1) : 1;

  final titleController = TextEditingController();

  final confirmed = await showDialog<bool>(
    context: context,
    builder: (ctx) {
      return StatefulBuilder(
        builder: (ctx, setState) => AlertDialog(
          title: Text('${l10n.createScene}: Nr. $nextOrder'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              DropdownButtonFormField<String>(
                initialValue: selectedChapter.id,
                decoration: InputDecoration(labelText: l10n.selectChapter),
                items: [
                  for (final c in chapters)
                    DropdownMenuItem(value: c.id, child: Text(c.name)),
                ],
                onChanged: (id) async {
                  final ch = chapters.firstWhere(
                    (c) => c.id == (id ?? selectedChapter.id),
                  );
                  setState(() => selectedChapter = ch);
                  final advs = await odm.campaigns
                      .doc(campaign.id)
                      .chapters
                      .doc(ch.id)
                      .adventures
                      .orderBy((o) => (o.order(),))
                      .get();
                  if (advs.isNotEmpty) {
                    setState(() {
                      adventures = advs;
                      selectedAdventure = adventures.first;
                    });
                  } else {
                    setState(() {
                      adventures = <Adventure>[];
                    });
                  }
                },
              ),
              const SizedBox(height: 12),
              DropdownButtonFormField<String>(
                initialValue: selectedAdventure.id,
                decoration: InputDecoration(labelText: l10n.selectAdventure),
                items: [
                  for (final a in adventures)
                    DropdownMenuItem(value: a.id, child: Text(a.name)),
                ],
                onChanged: (id) {
                  final adv = adventures.firstWhere(
                    (a) => a.id == (id ?? selectedAdventure.id),
                  );
                  setState(() => selectedAdventure = adv);
                },
              ),
              const SizedBox(height: 12),
              TextField(
                controller: titleController,
                decoration: InputDecoration(labelText: l10n.name),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(ctx).pop(false),
              child: Text(l10n.cancel),
            ),
            FilledButton(
              onPressed: () => Navigator.of(ctx).pop(true),
              child: Text(l10n.create),
            ),
          ],
        ),
      );
    },
  );
  if (confirmed != true) return;
  final title = titleController.text.trim();
  if (title.isEmpty || adventures.isEmpty) return;

  try {
    final scene = Scene(
      id: FirestoreODM.autoGeneratedId,
      title: title,
      order: nextOrder,
      summary: null,
      content: null,
      mentions: const <Map<String, dynamic>>[],
      mediaRefs: const <Map<String, dynamic>>[],
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      rev: 0,
    );
    await odm.campaigns
        .doc(campaign.id)
        .chapters
        .doc(selectedChapter.id)
        .adventures
        .doc(selectedAdventure.id)
        .scenes
        .insert(scene);

    final created = await odm.campaigns
        .doc(campaign.id)
        .chapters
        .doc(selectedChapter.id)
        .adventures
        .doc(selectedAdventure.id)
        .scenes
        .where((f) => f.title(isEqualTo: title))
        .orderBy((o) => (o.createdAt(descending: true),))
        .limit(1)
        .get()
        .then((v) => v.isNotEmpty ? v.first : null);

    if (!context.mounted) return;
    notification.success(context, title: Text(l10n.createScene));
    if (created != null) {
      SceneRoute(
        chapterId: selectedChapter.id,
        adventureId: selectedAdventure.id,
        sceneId: created.id,
      ).go(context);
    }
  } catch (e, st) {
    logger.e('Create scene failed', error: e, stackTrace: st);
    if (!context.mounted) return;
    notification.error(context, title: Text('Failed: $e'));
  }
}

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:moonforge/features/adventure/views/adventure_edit_screen.dart';
import 'package:moonforge/features/adventure/views/adventure_screen.dart';
import 'package:moonforge/features/auth/views/forgot_password_screen.dart';
import 'package:moonforge/features/auth/views/login_screen.dart';
import 'package:moonforge/features/auth/views/register_screen.dart';
import 'package:moonforge/features/campaign/views/campaign_edit_screen.dart';
import 'package:moonforge/features/campaign/views/campaign_screen.dart';
import 'package:moonforge/features/chapter/views/chapter_edit_screen.dart';
import 'package:moonforge/features/chapter/views/chapter_screen.dart';
import 'package:moonforge/features/encounters/views/encounter_edit_screen.dart';
import 'package:moonforge/features/encounters/views/encounter_screen.dart';
import 'package:moonforge/features/entities/views/entity_edit_screen.dart';
import 'package:moonforge/features/entities/views/entity_screen.dart';
import 'package:moonforge/features/home/views/home_screen.dart';
import 'package:moonforge/features/home/views/unknown_path_screen.dart';
import 'package:moonforge/features/parties/views/member_edit_screen.dart';
import 'package:moonforge/features/parties/views/member_screen.dart';
import 'package:moonforge/features/parties/views/party_edit_screen.dart';
import 'package:moonforge/features/parties/views/party_screen.dart';
import 'package:moonforge/features/scene/views/scene_edit_screen.dart';
import 'package:moonforge/features/scene/views/scene_screen.dart';
import 'package:moonforge/features/session/views/session_edit_screen.dart';
import 'package:moonforge/features/session/views/session_screen.dart';
import 'package:moonforge/features/settings/views/settings_screen.dart';
import 'package:moonforge/layout/layout_shell.dart';

part 'app_router.g.dart';

/// App-level router entry point for Moonforge.
///
/// This sets up GoRouter with type-safe routes generated by go_router_builder.
///
/// Key points:
/// - The route tree is declared below using @TypedStatefulShellRoute and
///   GoRouteData classes. The code generator creates a matching router config
///   in the generated part file (see `part 'app_router.g.dart';`).
/// - `$appRoutes` is provided by the generated file and collected from all
///   top-level typed routes. Do not edit the generated file manually.
/// - To update routes: change the annotations/classes below and run:
///     dart run build_runner build --delete-conflicting-outputs
/// - Navigate using typed helpers for compile-time safety, e.g.:
///     const HomeRoute().go(context);
///     const CampaignRoute().go(context);
///     const ChapterRoute(chapterId: 'c1').go(context);
///     const AdventureRoute(chapterId: 'c1', adventureId: 'a1').push(context);
///     const SceneRoute(chapterId: 'c1', adventureId: 'a1', sceneId: 's1').go(context);
///     const PartyRoute(partyId: 'p1').go(context);
/// - The shell layout is provided by `LayoutShell` via `AppShellRouteData`.
///
/// See docs/app_router.md for a deeper overview and troubleshooting tips.
class AppRouter {
  AppRouter._();

  static final GoRouter router = GoRouter(
    initialLocation: '/',
    routes: $appRoutes,
    errorBuilder: (BuildContext context, GoRouterState state) =>
        const UnknownPathScreen(),
    debugLogDiagnostics: false,
  );
}

@TypedStatefulShellRoute<AppShellRouteData>(
  branches: <TypedStatefulShellBranch<StatefulShellBranchData>>[
    TypedStatefulShellBranch<StatefulShellBranchData>(
      routes: <TypedRoute<GoRouteData>>[
        TypedGoRoute<HomeRoute>(
          path: '/',
          routes: <TypedRoute<GoRouteData>>[
            TypedGoRoute<LoginRoute>(
              path: 'login',
              routes: <TypedRoute<GoRouteData>>[
                TypedGoRoute<RegisterRoute>(path: 'register'),
                TypedGoRoute<ForgotPasswordRoute>(path: 'forgot'),
              ],
            ),
          ],
        ),
      ],
    ),
    TypedStatefulShellBranch<StatefulShellBranchData>(
      routes: <TypedRoute<GoRouteData>>[
        TypedGoRoute<CampaignRoute>(
          path: '/campaign',
          routes: <TypedRoute<GoRouteData>>[
            TypedGoRoute<CampaignEditRoute>(path: 'edit'),
            TypedGoRoute<ChapterRoute>(
              path: 'chapter/:chapterId',
              routes: <TypedRoute<GoRouteData>>[
                TypedGoRoute<ChapterEditRoute>(path: 'edit'),
                TypedGoRoute<AdventureRoute>(
                  path: 'adventure/:adventureId',
                  routes: <TypedRoute<GoRouteData>>[
                    TypedGoRoute<AdventureEditRoute>(path: 'edit'),
                    TypedGoRoute<SceneRoute>(
                      path: 'scene/:sceneId',
                      routes: <TypedRoute<GoRouteData>>[
                        TypedGoRoute<SceneEditRoute>(path: 'edit'),
                      ],
                    ),
                  ],
                ),
              ],
            ),
            TypedGoRoute<EncounterRoute>(
              path: 'encounter/:encounterId',
              routes: <TypedRoute<GoRouteData>>[
                TypedGoRoute<EncounterEditRoute>(path: 'edit'),
              ],
            ),
            TypedGoRoute<EntityRoute>(
              path: 'entity/:entityId',
              routes: <TypedRoute<GoRouteData>>[
                TypedGoRoute<EntityEditRoute>(path: 'edit'),
              ],
            ),
          ],
        ),
      ],
    ),
    TypedStatefulShellBranch<StatefulShellBranchData>(
      routes: <TypedRoute<GoRouteData>>[
        TypedGoRoute<PartyRootRoute>(
          path: '/party',
          routes: <TypedRoute<GoRouteData>>[
            TypedGoRoute<PartyRoute>(
              path: ':partyId',
              routes: <TypedRoute<GoRouteData>>[
                TypedGoRoute<PartyEditRoute>(path: 'edit'),
                TypedGoRoute<MemberRoute>(
                  path: 'member/:memberId',
                  routes: <TypedRoute<GoRouteData>>[
                    TypedGoRoute<MemberEditRoute>(path: 'edit'),
                  ],
                ),
                TypedGoRoute<SessionRoute>(
                  path: 'session/:sessionId',
                  routes: <TypedRoute<GoRouteData>>[
                    TypedGoRoute<SessionEditRoute>(path: 'edit'),
                  ],
                ),
              ],
            ),
          ],
        ),
      ],
    ),
    TypedStatefulShellBranch<StatefulShellBranchData>(
      routes: <TypedRoute<GoRouteData>>[
        TypedGoRoute<SettingsRoute>(path: '/settings'),
      ],
    ),
  ],
)
class AppShellRouteData extends StatefulShellRouteData {
  const AppShellRouteData();

  @override
  Widget builder(
    BuildContext context,
    GoRouterState state,
    StatefulNavigationShell navigationShell,
  ) {
    return LayoutShell(navigationShell: navigationShell);
  }
}

class HomeRoute extends GoRouteData with _$HomeRoute {
  const HomeRoute();
  @override
  Widget build(BuildContext context, GoRouterState state) => const HomeScreen();
}

class LoginRoute extends GoRouteData with _$LoginRoute {
  const LoginRoute();
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      const LoginScreen();
}

class RegisterRoute extends GoRouteData with _$RegisterRoute {
  const RegisterRoute();
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      const RegisterScreen();
}

class ForgotPasswordRoute extends GoRouteData with _$ForgotPasswordRoute {
  const ForgotPasswordRoute();
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      const ForgotPasswordScreen();
}

class CampaignRoute extends GoRouteData with _$CampaignRoute {
  const CampaignRoute();
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      const CampaignScreen();
}

class CampaignEditRoute extends GoRouteData with _$CampaignEditRoute {
  const CampaignEditRoute();
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      const CampaignEditScreen();
}

class ChapterRoute extends GoRouteData with _$ChapterRoute {
  const ChapterRoute({required this.chapterId});
  final String chapterId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      ChapterScreen(chapterId: chapterId);
}

class ChapterEditRoute extends GoRouteData with _$ChapterEditRoute {
  const ChapterEditRoute({required this.chapterId});
  final String chapterId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      ChapterEditScreen(chapterId: chapterId);
}

class AdventureRoute extends GoRouteData with _$AdventureRoute {
  const AdventureRoute({required this.chapterId, required this.adventureId});
  final String chapterId;
  final String adventureId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      AdventureScreen(chapterId: chapterId, adventureId: adventureId);
}

class AdventureEditRoute extends GoRouteData with _$AdventureEditRoute {
  const AdventureEditRoute({
    required this.chapterId,
    required this.adventureId,
  });
  final String chapterId;
  final String adventureId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      AdventureEditScreen(chapterId: chapterId, adventureId: adventureId);
}

class SceneRoute extends GoRouteData with _$SceneRoute {
  const SceneRoute({
    required this.chapterId,
    required this.adventureId,
    required this.sceneId,
  });
  final String chapterId;
  final String adventureId;
  final String sceneId;
  @override
  Widget build(BuildContext context, GoRouterState state) => SceneScreen(
    chapterId: chapterId,
    adventureId: adventureId,
    sceneId: sceneId,
  );
}

class SceneEditRoute extends GoRouteData with _$SceneEditRoute {
  const SceneEditRoute({
    required this.chapterId,
    required this.adventureId,
    required this.sceneId,
  });
  final String chapterId;
  final String adventureId;
  final String sceneId;
  @override
  Widget build(BuildContext context, GoRouterState state) => SceneEditScreen(
    chapterId: chapterId,
    adventureId: adventureId,
    sceneId: sceneId,
  );
}

class EncounterRoute extends GoRouteData with _$EncounterRoute {
  const EncounterRoute({required this.encounterId});
  final String encounterId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      EncounterScreen(encounterId: encounterId);
}

class EncounterEditRoute extends GoRouteData with _$EncounterEditRoute {
  const EncounterEditRoute({required this.encounterId});
  final String encounterId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      EncounterEditScreen(encounterId: encounterId);
}

class EntityRoute extends GoRouteData with _$EntityRoute {
  const EntityRoute({required this.entityId});
  final String entityId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      EntityScreen(entityId: entityId);
}

class EntityEditRoute extends GoRouteData with _$EntityEditRoute {
  const EntityEditRoute({required this.entityId});
  final String entityId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      EntityEditScreen(entityId: entityId);
}

class PartyRootRoute extends GoRouteData with _$PartyRootRoute {
  const PartyRootRoute({this.id});
  final String? id; // query parameter
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      PartyScreen(partyId: id ?? '');
}

class PartyRoute extends GoRouteData with _$PartyRoute {
  const PartyRoute({required this.partyId});
  final String partyId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      PartyScreen(partyId: partyId);
}

class PartyEditRoute extends GoRouteData with _$PartyEditRoute {
  const PartyEditRoute({required this.partyId});
  final String partyId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      PartyEditScreen(partyId: partyId);
}

class MemberRoute extends GoRouteData with _$MemberRoute {
  const MemberRoute({required this.partyId, required this.memberId});
  final String partyId;
  final String memberId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      MemberScreen(partyId: partyId, memberId: memberId);
}

class MemberEditRoute extends GoRouteData with _$MemberEditRoute {
  const MemberEditRoute({required this.partyId, required this.memberId});
  final String partyId;
  final String memberId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      MemberEditScreen(partyId: partyId, memberId: memberId);
}

class SessionRoute extends GoRouteData with _$SessionRoute {
  const SessionRoute({required this.partyId, required this.sessionId});
  final String partyId;
  final String sessionId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      SessionScreen(partyId: partyId, sessionId: sessionId);
}

class SessionEditRoute extends GoRouteData with _$SessionEditRoute {
  const SessionEditRoute({required this.partyId, required this.sessionId});
  final String partyId;
  final String sessionId;
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      SessionEditScreen(partyId: partyId, sessionId: sessionId);
}

class SettingsRoute extends GoRouteData with _$SettingsRoute {
  const SettingsRoute();
  @override
  Widget build(BuildContext context, GoRouterState state) =>
      const SettingsScreen();
}

name: Build and Release with Fastforge

on:
  # Trigger on pushes to main (production) or beta branches, or on new tags
  push:
    branches:
      - main
      - beta
    tags:
      - 'v*'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name (e.g., production or beta)'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - beta

jobs:
  # Determine build environment based on branch
  setup:
    runs-on: ubuntu-latest
    outputs:
      app_env: ${{ steps.determine_env.outputs.app_env }}
      is_prerelease: ${{ steps.determine_env.outputs.is_prerelease }}
    steps:
      - name: Determine environment
        id: determine_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/beta" ]]; then
            echo "app_env=beta" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "Building for beta environment"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "app_env=production" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "Building for production environment"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            if [[ "${{ github.ref }}" == *"beta"* ]] || [[ "${{ github.ref }}" == *"alpha"* ]]; then
              echo "app_env=beta" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "Building for beta environment (from tag)"
            else
              echo "app_env=production" >> $GITHUB_OUTPUT
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "Building for production environment (from tag)"
            fi
          else
            echo "app_env=production" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "Defaulting to production environment"
          fi

  # Build for Windows
  build-windows:
    needs: setup
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: Get dependencies
        working-directory: moonforge
        run: flutter pub get
      
      - name: Run code generation
        working-directory: moonforge
        run: dart run build_runner build --delete-conflicting-outputs
      
      - name: Build Windows app
        working-directory: moonforge
        run: flutter build windows --release
      
      - name: Install Fastforge
        run: dart pub global activate fastforge
      
      - name: Package with Fastforge
        run: fastforge package --platform windows --target exe --build-args="dart-define:APP_ENV=${{ needs.setup.outputs.app_env }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: dist/**/*.exe
          retention-days: 7

  # Build for macOS
  build-macos:
    needs: setup
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: Get dependencies
        working-directory: moonforge
        run: flutter pub get
      
      - name: Run code generation
        working-directory: moonforge
        run: dart run build_runner build --delete-conflicting-outputs
      
      - name: Build macOS app
        working-directory: moonforge
        run: flutter build macos --release
      
      - name: Install Fastforge
        run: dart pub global activate fastforge
      
      - name: Package with Fastforge
        run: fastforge package --platform macos --target dmg --build-args="dart-define:APP_ENV=${{ needs.setup.outputs.app_env }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: dist/**/*.dmg
          retention-days: 7

  # Build for Linux
  build-linux:
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: Get dependencies
        working-directory: moonforge
        run: flutter pub get
      
      - name: Run code generation
        working-directory: moonforge
        run: dart run build_runner build --delete-conflicting-outputs
      
      - name: Build Linux app
        working-directory: moonforge
        run: flutter build linux --release
      
      - name: Install Fastforge
        run: dart pub global activate fastforge
      
      - name: Package Linux AppImage
        run: fastforge package --platform linux --target appimage --build-args="dart-define:APP_ENV=${{ needs.setup.outputs.app_env }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Package Linux DEB
        run: fastforge package --platform linux --target deb --build-args="dart-define:APP_ENV=${{ needs.setup.outputs.app_env }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: |
            dist/**/*.AppImage
            dist/**/*.deb
          retention-days: 7

  # Create GitHub Release and publish artifacts
  release:
    needs: [setup, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
      
      - name: Display structure of downloaded files
        run: ls -R dist/
      
      - name: Get version from tag or use default
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.1.0-dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Environment: ${{ needs.setup.outputs.app_env }}"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: ${{ needs.setup.outputs.is_prerelease == 'true' }}
          files: |
            dist/**/*
          body: |
            ## Moonforge v${{ steps.version.outputs.VERSION }} (${{ needs.setup.outputs.app_env == 'beta' && 'Beta' || 'Production' }} Release)
            
            ### Downloads
            - **Windows**: `Moonforge-${{ steps.version.outputs.VERSION }}-windows.exe`
            - **macOS**: `Moonforge-${{ steps.version.outputs.VERSION }}-macos.dmg`
            - **Linux AppImage**: `Moonforge-${{ steps.version.outputs.VERSION }}-linux.AppImage`
            - **Linux DEB**: `Moonforge-${{ steps.version.outputs.VERSION }}-linux.deb`
            
            ### What's New
            <!-- Add release notes here -->
            
            ### Installation
            - **Windows**: Download and run the .exe installer
            - **macOS**: Download the .dmg, open it, and drag Moonforge to Applications
            - **Linux**: Download the .AppImage, make it executable, and run it, or install the .deb package
            
            For more information, see the [setup guide](https://github.com/EmilyMoonstone/Moonforge/blob/main/docs/fastforge_setup.md).
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
